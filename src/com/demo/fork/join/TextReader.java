package com.demo.fork.join;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

public class TextReader extends RecursiveTask<List<Character>> {
	/**
	 * 
	 */
	private static final long serialVersionUID = -5330255910640174063L;
	char[] content = null;
	List<TextReader> tasks = new ArrayList<>();
	List<Character> value = new ArrayList<>();
	private final String textToRead = "The ForkJoinPool is basically a specialized implementation of ExecutorService implementing the work-stealing algorithm we talked about above. We create an instance of ForkJoinPool by providing the target parallelism level i.e. the number of processors as shown below";

	@Override
	protected List<Character> compute() {
		content = textToRead.toCharArray();
		for (char ch : content) {
			if (content.length > 100) {
				TextReader task = new TextReader();
				// Here i split my task
				task.fork();
				tasks.add(task);
			} else {
				value.add(ch);
			}
		}
		addTasks(value, tasks);
		return value;
	}

	public void addTasks(List<Character> value, List<TextReader> tasks) {
		for (TextReader task : tasks) {
			// Each task completion i am doing merge
			value.addAll(task.join());
		}
	}

	public static void main(String[] args) {
		ForkJoinPool pool = new ForkJoinPool(3);
		TextReader readThread1 = new TextReader();
		TextReader readThread2 = new TextReader();
		TextReader readThread3 = new TextReader();
		pool.execute(readThread1);
		pool.execute(readThread2);
		pool.execute(readThread3);

		// Write to the console information about the status of the pool every
		// second
		// until the three tasks have finished their execution.
		do {
			System.out.printf("******************************************\n");
			System.out.printf("Main: Parallelism: %d\n", pool.getParallelism());
			System.out.printf("Main: Active Threads: %d\n",
					pool.getActiveThreadCount());
			System.out.printf("Main: Task Count: %d\n",
					pool.getQueuedTaskCount());
			System.out.printf("Main: Steal Count: %d\n", pool.getStealCount());
			System.out.printf("******************************************\n");

		} while ((!readThread1.isDone()) || (!readThread2.isDone())
				|| (!readThread3.isDone()));
		// Shut down ForkJoinPool using the shutdown() method.
		pool.shutdown();
		// Write the number of results generated by each task to the console.
		List<Character> results;
		results = readThread1.join();
		System.out.printf("Thread 1 : %d files found.\n", results.size());
		results = readThread2.join();
		System.out.printf("Thread 2 : %d files found.\n", results.size());
		results = readThread3.join();
		System.out.printf("Thread 3 : %d files found.\n", results.size());
	}
}
